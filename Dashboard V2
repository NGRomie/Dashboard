<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Engagement Dashboard - University of Arizona Think Tank</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        .dashboard-header {
            background: white;
            border-radius: 15px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            text-align: center;
        }
        .dashboard-header h1 {
            color: #2c3e50;
            font-size: 2.5em;
            margin-bottom: 10px;
        }
        .dashboard-header p {
            color: #7f8c8d;
            font-size: 1.2em;
        }
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .stat-card {
            background: white;
            border-radius: 15px;
            padding: 25px;
            text-align: center;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
        }
        .stat-card:hover { transform: translateY(-5px); }
        .stat-number { font-size: 3em; font-weight: bold; margin-bottom: 10px; }
        .stat-label { font-size: 1.1em; color: #7f8c8d; text-transform: uppercase; letter-spacing: 1px; }
        .green { color: #27ae60; }
        .yellow { color: #f39c12; }
        .red { color: #e74c3c; }
        .charts-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 30px;
            margin-bottom: 30px;
        }
        .chart-container {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }
        .chart-title {
            font-size: 1.4em;
            color: #2c3e50;
            margin-bottom: 20px;
            text-align: center;
        }
        .student-list {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }
        .section-title {
            font-size: 1.8em;
            color: #2c3e50;
            margin-bottom: 25px;
            text-align: center;
        }
        .student-item {
            display: flex;
            align-items: center;
            padding: 15px;
            margin-bottom: 15px;
            border-radius: 10px;
            transition: all 0.3s ease;
            cursor: pointer;
        }
        .student-item:hover {
            transform: translateX(5px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        .student-red { background: #fdf2f2; border-left: 5px solid #e74c3c; }
        .student-yellow { background: #fefcf0; border-left: 5px solid #f39c12; }
        .student-green { background: #f0f9f4; border-left: 5px solid #27ae60; }
        .student-status {
            font-size: 1.5em;
            margin-right: 15px;
            width: 30px;
        }
        .student-info { flex: 1; }
        .student-name {
            font-size: 1.2em;
            font-weight: bold;
            margin-bottom: 5px;
        }
        .student-details {
            color: #7f8c8d;
            font-size: 0.9em;
        }
        .student-score {
            font-size: 1.5em;
            font-weight: bold;
            margin-left: 15px;
        }
        .filters {
            background: white;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            display: flex;
            gap: 15px;
            align-items: center;
            flex-wrap: wrap;
        }
        .filter-label { font-weight: bold; color: #2c3e50; }
        .filter-button {
            padding: 10px 20px;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s ease;
        }
        .filter-active { background: #3498db; color: white; }
        .filter-inactive { background: #ecf0f1; color: #7f8c8d; }
        .filter-button:hover { transform: translateY(-2px); }
        .last-updated {
            text-align: center;
            color: #7f8c8d;
            font-style: italic;
            margin-top: 20px;
        }
        .quote-box {
            background: #f8f9fa;
            border-left: 4px solid #3498db;
            padding: 15px;
            margin: 10px 0;
            border-radius: 5px;
            font-style: italic;
        }
        .quote-box::before, .quote-box::after {
            content: '"';
            font-size: 1.5em;
            color: #3498db;
        }
        @media (max-width: 768px) {
            .dashboard-header h1 { font-size: 2em; }
            .charts-grid { grid-template-columns: 1fr; }
            .student-item { flex-direction: column; text-align: center; }
        }
        .student-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
            gap: 18px;
        }
        .student-card {
            background: #f7f9fc;
            border-radius: 12px;
            padding: 18px;
            box-shadow: 0 6px 16px rgba(0,0,0,0.08);
            cursor: pointer;
            transition: transform 0.2s;
            text-align: center;
            border-left: 5px solid transparent;
        }
        .student-card.student-green { border-left-color: #27ae60; }
        .student-card.student-yellow { border-left-color: #f39c12; }
        .student-card.student-red { border-left-color: #e74c3c; }
        .student-card:hover { transform: translateY(-3px) scale(1.03); }
        #studentFormModal input[type="text"],
        #studentFormModal input[type="number"] {
            font-size: 1em;
            padding: 7px 12px;
            border: 1px solid #ccc;
            border-radius: 6px;
            margin-bottom: 6px;
            background: #f4f7fa;
        }
        #studentFormModal label { font-weight: bold; color: #2c3e50; }
        .coach-note-summary { cursor:pointer; font-weight:bold; }
        .coach-note-details { color:#555; margin-left:14px; }
    </style>
    <script>
        // === COACH NOTES AND BRIEFING ===
        function randomCoachNotes() {
            const topics = [
                "Discussed exam strategy",
                "Reviewed homework progress",
                "Talked about stress management",
                "Set goals for ALEKS topics",
                "Addressed attendance concerns"
            ];
            const details = [
                "Student expressed some anxiety but is willing to try campus resources.",
                "Agreed to check in again before next major assignment.",
                "Coach recommended regular Think Tank visits.",
                "Student is confident about keeping up with coursework.",
                "Planned to join a study group."
            ];
            const notes = [];
            const noteCount = 1 + Math.floor(Math.random() * 2);
            for (let i = 0; i < noteCount; i++) {
                let daysAgo = Math.floor(Math.random() * 20);
                let date = new Date();
                date.setDate(date.getDate() - daysAgo);
                notes.push({
                    date: date.toISOString(),
                    summary: topics[Math.floor(Math.random() * topics.length)],
                    details: details[Math.floor(Math.random() * details.length)]
                });
            }
            notes.sort((a, b) => new Date(a.date) - new Date(b.date));
            return notes;
        }
        function renderCoachNotes(notes) {
            if (!notes || !notes.length) return '<em>No coach notes on record.</em>';
            return notes.map((note, i) => `
                <li style="margin-bottom:8px;">
                    <div class="coach-note-summary" onclick="toggleCoachNote(${i})" style="cursor:pointer; font-weight:bold;">
                        üìù <span>${new Date(note.date).toLocaleString([], { dateStyle: 'medium', timeStyle: 'short' })}</span>: ${note.summary}
                        <span id="expandIcon${i}" style="color:#3498db;">[+]</span>
                    </div>
                    <div class="coach-note-details" id="coachNoteDetails${i}" style="display:none; margin:5px 0 0 14px; color:#555;">
                        ${note.details}
                    </div>
                </li>
            `).join('');
        }
        window.toggleCoachNote = function(i) {
            const details = document.getElementById('coachNoteDetails' + i);
            const icon = document.getElementById('expandIcon' + i);
            if (details.style.display === 'none') {
                details.style.display = 'block';
                icon.textContent = '[-]';
            } else {
                details.style.display = 'none';
                icon.textContent = '[+]';
            }
        };
        function generateStudentBriefing(student) {
            let sentimentTrend = "";
            let wellnessTrend = "";
            if (student.sentimentHistory && student.sentimentHistory.length >= 2) {
                let prev = student.sentimentHistory[student.sentimentHistory.length - 2].score;
                let curr = student.sentimentHistory[student.sentimentHistory.length - 1].score;
                if (curr > prev) sentimentTrend = "Their overall sentiment score has improved recently.";
                else if (curr < prev) sentimentTrend = "Their overall sentiment score has declined recently.";
            }
            if (student.wellnessHistory && student.wellnessHistory.length >= 2) {
                let prevW = student.wellnessHistory[student.wellnessHistory.length - 2].score;
                let currW = student.wellnessHistory[student.wellnessHistory.length - 1].score;
                if (currW > prevW) wellnessTrend = "Wellness has increased.";
                else if (currW < prevW) wellnessTrend = "Wellness has decreased.";
            }
            let statusText = "";
            if (student.grade >= 85) statusText = "excelling academically";
            else if (student.grade >= 70) statusText = "maintaining a satisfactory grade";
            else statusText = "currently struggling with coursework";
            let engagementText = student.aleksDays <= 3 ?
                "They have engaged with ALEKS recently." :
                `It has been ${student.aleksDays} days since their last ALEKS login.`;
            let stressText = student.stress > 7 ? "Recent surveys show high stress." : "";
            let confidenceText = student.confidence < 5 ? "Confidence is currently low." : "";
            let coachNoteText = "";
            if (student.coachNotes && student.coachNotes.length) {
                let lastNote = student.coachNotes[student.coachNotes.length - 1];
                coachNoteText = `In the last meeting (${new Date(lastNote.date).toLocaleDateString()}), the coach noted: "${lastNote.summary}".`;
            }
            let reco = "Recommendation: ";
            if (student.status === "red") reco += "Prioritize outreach and offer extra support resources.";
            else if (student.status === "yellow") reco += "Encourage continued engagement and monitor closely.";
            else reco += "Maintain current strategies and reinforce positive behaviors.";
            return `
                <div style="background:#f8f9fa; border-left:4px solid #3498db; border-radius:8px; padding:12px 16px; margin-bottom:16px;">
                    <strong>Briefing for Coach:</strong><br>
                    ${student.fullName} is ${statusText} (grade: ${student.grade}%). ${engagementText}
                    ${sentimentTrend} ${wellnessTrend}
                    ${stressText} ${confidenceText}
                    ${coachNoteText}
                    <br><em>${reco}</em>
                </div>
            `;
        }

        // === DATA GENERATION AND DASHBOARD LOGIC ===
        const firstNames = ['Emma', 'Liam', 'Olivia', 'Noah', 'Ava', 'Ethan', 'Sophia', 'Mason', 'Isabella', 'William',
                            'Mia', 'James', 'Charlotte', 'Benjamin', 'Amelia', 'Lucas', 'Harper', 'Henry', 'Evelyn', 'Alexander'];
        const lastNames = ['Johnson', 'Williams', 'Brown', 'Jones', 'Garcia', 'Miller', 'Davis', 'Rodriguez', 'Martinez', 'Hernandez'];

        const surveyQuotes = {
            stress: {
                high: [
                    "I feel overwhelmed with everything I have to do",
                    "I'm having trouble sleeping because I worry about school",
                    "The workload feels impossible to manage",
                    "I panic when I think about upcoming exams",
                    "I can't focus because I'm so anxious all the time",
                    "Everything feels like it's piling up and I can't catch up",
                    "I feel like I'm drowning in assignments",
                    "The pressure is making it hard to eat or sleep normally"
                ],
                medium: [
                    "Some days are harder than others to manage",
                    "I feel stressed but I'm trying to cope",
                    "School is challenging but I think I can handle it",
                    "I worry sometimes but not constantly",
                    "The workload is manageable most of the time",
                    "I have stressful moments but they pass",
                    "I feel pressure but I'm learning to deal with it"
                ],
                low: [
                    "I feel pretty calm about school overall",
                    "I'm managing my stress well this semester",
                    "School feels challenging but not overwhelming",
                    "I have good strategies for dealing with pressure",
                    "I feel balanced and in control",
                    "Even when things get busy, I stay pretty relaxed",
                    "I'm confident in my ability to handle challenges"
                ]
            },
            confidence: {
                high: [
                    "I believe I can succeed in my classes",
                    "I feel prepared for the challenges ahead",
                    "I trust my ability to learn new material",
                    "I'm confident I can achieve my academic goals",
                    "I feel capable of handling difficult coursework",
                    "I believe in my potential to do well",
                    "I feel ready to tackle whatever comes my way"
                ],
                medium: [
                    "I think I can probably do well if I work hard",
                    "Some subjects feel easier than others for me",
                    "I have moments where I doubt myself but mostly feel okay",
                    "I'm learning to believe in myself more",
                    "My confidence varies depending on the subject",
                    "I feel capable some days, uncertain others",
                    "I'm working on building my self-confidence"
                ],
                low: [
                    "I don't think I'm smart enough for college",
                    "I worry I'm not cut out for this",
                    "Everyone else seems to understand things better than me",
                    "I feel like I'm falling behind everyone",
                    "I don't think I belong here",
                    "I'm afraid I'm going to fail",
                    "I doubt my ability to succeed academically"
                ]
            }
        };

        function generateStudentData() {
            const students = [];
            for (let i = 0; i < 50; i++) {
                const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];
                const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];
                const studentType = Math.random() < 0.2 ? 'struggling' : Math.random() < 0.7 ? 'average' : 'excelling';

                let grade, aleksDays, aleksTopics, thinkTankVisits, stress, confidence, wellness;

                if (studentType === 'struggling') {
                    grade = 40 + Math.random() * 25;
                    aleksDays = 5 + Math.floor(Math.random() * 10);
                    aleksTopics = Math.floor(Math.random() * 15);
                    thinkTankVisits = Math.floor(Math.random() * 3);
                    stress = 7 + Math.floor(Math.random() * 4);
                    confidence = 1 + Math.floor(Math.random() * 4);
                    wellness = 20 + Math.random() * 40;
                } else if (studentType === 'excelling') {
                    grade = 85 + Math.random() * 13;
                    aleksDays = Math.floor(Math.random() * 3);
                    aleksTopics = 25 + Math.floor(Math.random() * 15);
                    thinkTankVisits = 2 + Math.floor(Math.random() * 5);
                    stress = 1 + Math.floor(Math.random() * 5);
                    confidence = 7 + Math.floor(Math.random() * 4);
                    wellness = 80 + Math.random() * 20;
                } else {
                    grade = 70 + Math.random() * 15;
                    aleksDays = 1 + Math.floor(Math.random() * 4);
                    aleksTopics = 15 + Math.floor(Math.random() * 10);
                    thinkTankVisits = 1 + Math.floor(Math.random() * 4);
                    stress = 3 + Math.floor(Math.random() * 5);
                    confidence = 5 + Math.floor(Math.random() * 4);
                    wellness = 60 + Math.random() * 20;
                }

                const status = wellness >= 80 ? 'green' : wellness >= 60 ? 'yellow' : 'red';
                const statusEmoji = status === 'green' ? 'üü¢' : status === 'yellow' ? 'üü°' : 'üî¥';

                const sentimentScore = Math.max(1, Math.min(10, (11 - stress + confidence) / 2));
                const stressLevel = stress >= 8 ? 'high' : stress >= 5 ? 'medium' : 'low';
                const confidenceLevel = confidence >= 8 ? 'high' : confidence >= 5 ? 'medium' : 'low';
                const stressQuote = surveyQuotes.stress[stressLevel][Math.floor(Math.random() * surveyQuotes.stress[stressLevel].length)];
                const confidenceQuote = surveyQuotes.confidence[confidenceLevel][Math.floor(Math.random() * surveyQuotes.confidence[confidenceLevel].length)];

                students.push({
                    id: `UA${1000 + i}`,
                    firstName, lastName,
                    fullName: `${firstName} ${lastName}`,
                    grade: Math.round(grade * 10) / 10,
                    aleksDays: Math.floor(aleksDays),
                    aleksTopics: Math.floor(aleksTopics),
                    thinkTankVisits: Math.floor(thinkTankVisits),
                    stress: Math.floor(stress),
                    confidence: Math.floor(confidence),
                    wellness: Math.round(wellness * 10) / 10,
                    status, statusEmoji, type: studentType,
                    sentimentScore: Math.round(sentimentScore * 10) / 10,
                    stressQuote, confidenceQuote
                });

                students[i].coachNotes = randomCoachNotes();
                students[i].sentimentHistory = [
                    { date: '2025-05-15', score: Math.max(1, Math.round(students[i].sentimentScore - Math.random()*2)) },
                    { date: '2025-05-22', score: students[i].sentimentScore }
                ];
                students[i].wellnessHistory = [
                    { date: '2025-05-15', score: Math.max(1, Math.round(students[i].wellness - Math.random()*10)) },
                    { date: '2025-05-22', score: students[i].wellness }
                ];
            }
            return students.sort((a, b) => a.wellness - b.wellness);
        }

        const students = generateStudentData();
        let currentFilter = 'all';
        let currentView = 'list';

        // ... (all your existing functions for stats, charts, filtering, etc.) ...
        // Place your displayStudents, filterStudents, updateStats, createCharts, etc. here, unchanged

        // ==== MODIFIED showStudentProfile ====
        function showStudentProfile(studentId) {
            const student = students.find(s => s.id === studentId);
            if (!student) return;
            const content = `
                ${generateStudentBriefing(student)}
                <h2 style="color: #2c3e50; margin-bottom: 20px;">${student.fullName} - Detailed Profile</h2>
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 30px;">
                    <div style="background: #f8f9fa; padding: 15px; border-radius: 10px;">
                        <h4 style="color: #2c3e50; margin-bottom: 10px;">Academic Performance</h4>
                        <p><strong>Current Grade:</strong> ${student.grade}%</p>
                        <p><strong>ALEKS Topics:</strong> ${student.aleksTopics} completed</p>
                        <p><strong>Last ALEKS Login:</strong> ${student.aleksDays} days ago</p>
                    </div>
                    <div style="background: #f8f9fa; padding: 15px; border-radius: 10px;">
                        <h4 style="color: #2c3e50; margin-bottom: 10px;">Support Utilization</h4>
                        <p><strong>Think Tank Visits:</strong> ${student.thinkTankVisits} this month</p>
                        <p><strong>Overall Wellness:</strong> ${student.wellness}/100</p>
                        <p><strong>Status:</strong> <span style="color: ${student.status === 'green' ? '#27ae60' : student.status === 'yellow' ? '#f39c12' : '#e74c3c'}">${student.statusEmoji} ${student.status.charAt(0).toUpperCase() + student.status.slice(1)}</span></p>
                    </div>
                    <div style="background: #f8f9fa; padding: 15px; border-radius: 10px;">
                        <h4 style="color: #2c3e50; margin-bottom: 10px;">Survey Insights</h4>
                        <p><strong>Overall Sentiment:</strong> ${student.sentimentScore}/10</p>
                        <p><strong>Stress Level:</strong> ${student.stress}/10</p>
                        <p><strong>Confidence Level:</strong> ${student.confidence}/10</p>
                    </div>
                </div>
                <div style="margin-top:24px;">
                    <h3 style="color:#2c3e50;">Coach‚Äôs Notes</h3>
                    <ul style="list-style:none; padding:0;">${renderCoachNotes(student.coachNotes)}</ul>
                </div>
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-bottom: 30px;">
                    <div>
                        <h4 style="color: #2c3e50; margin-bottom: 15px;">Recent Survey Responses</h4>
                        <div style="background: #fff3cd; padding: 15px; border-radius: 10px; margin-bottom: 15px; border-left: 4px solid #ffc107;">
                            <h5 style="color: #856404; margin-bottom: 8px;">About Stress (${student.stress}/10):</h5>
                            <p style="font-style: italic; color: #6c757d; margin: 0;">"${student.stressQuote}"</p>
                        </div>
                        <div style="background: #d1ecf1; padding: 15px; border-radius: 10px; border-left: 4px solid #17a2b8;">
                            <h5 style="color: #0c5460; margin-bottom: 8px;">About Confidence (${student.confidence}/10):</h5>
                            <p style="font-style: italic; color: #6c757d; margin: 0;">"${student.confidenceQuote}"</p>
                        </div>
                    </div>
                </div>
            `;
            document.getElementById('studentProfileContent').innerHTML = content;
            document.getElementById('studentProfileModal').style.display = 'block';
        }
        // ... (rest of your dashboard JS goes here, unchanged) ...
    </script>
</head>
<body>
    <div class="dashboard-header">
        <h1>üéØ Student Engagement Dashboard</h1>
        <p>University of Arizona Think Tank ‚Ä¢ Proactive Student Support System</p>
    </div>
    <!-- ... rest of your HTML content, dashboard stats, charts, filters, student list, modals ... -->
    <!-- Make sure your modal includes: -->
    <div id="studentProfileModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.7); z-index: 1000;">
        <div style="position: relative; width: 80%; max-width: 900px; margin: 50px auto; background: white; border-radius: 15px; padding: 30px; box-shadow: 0 10px 30px rgba(0,0,0,0.3); max-height: 90vh; overflow-y: auto;">
            <button onclick="document.getElementById('studentProfileModal').style.display='none'" style="position: absolute; top: 15px; right: 15px; background: none; border: none; font-size: 24px; cursor: pointer;">√ó</button>
            <div id="studentProfileContent"></div>
        </div>
    </div>
    <!-- ... rest of your HTML ... -->
</body>
</html>
